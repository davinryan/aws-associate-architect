# Supporting continuous delivery during PI execution
Basically all about Inspect and Adapt (I & A)

## Role of architect (during PI and System demo)
* Refining architectural backlog
* Shepherding architectural vision all through implementation (verify alignment with solution intent)
* Refactor architecture (gather feedback, gauge value of decisions, observe emergent architecture)
* Improving CI/CD tools
* Deliver minimum viable architecture (MVA)
* Research trends and apply emerging technology

## Role of architect (System demo)
* Architects are team members who demo their work (architectural runway - spikes enablers, NFRs etc...)
* They should attend other teams iteration/system demos
* Verify alignment with solution intent (gather feedback, gauge value of decisions, observe emergent architecture)

## Role of architect (Solution demo - extends system)
Boring.... very uninspired just same as system with capability words instead to support large solution
* prepare capabilities
* Demo enablers, capabilities, NFRs, benefits
* Provide feedback on implemented solution
* Requires strong DevOps practices being in place due to heavy integration across teams work

**Cool facts**
* architects need to stay visible and accessible not just govern! Otherwise, how can they participate
in variable solution intent
* Core customer is ART teams
* Lead by example, be an ART team's champion
* Always, always ask "IS THE ARCHITECTURE ENABLING OR HINDERING FEATURE DELIVERY"
* If you canâ€™t pull off the system demo, you have false velocity. It is the indicator that the ART is, 
or is not, practicing Agile at scale.

## Guide architecture and Continuous Delivery throughout the PI
**Architect Sync**
* ART Level meetups: system architects (maybe solution architects), tech leads, key SME's
* Solution Level meetups: system, solution architects, key SME's
* align on strategy
* design architectural runway
* resolve risks and remove impediments
* share news and knowledge
* swarm problems and solutions
* NOT: governance committee
* deal with team level issues
IMPORTANT NOTE: you might have an ART level and Solution level architecture SYNC. Endevour to just have
an ART sync to reduce waste and bureaucracy

## Prepare for Iteration Reviews and System and Solution Demos
**Iteration review**
WHAT:  immediate team level feedback
WHEN:  every iteration
WHO:   by teams to team members and interested stake holders 
SHOWS: Team value and progress update
**system demo**
WHAT:  immediate system level feedback (full system in staging environment)
WHEN:  every iteration and end of PI
WHO:   by ART product manager and product owners to sponsors, interested stakeholders and customers
SHOWS: System value, progress
**solution demo**
WHAT:  working software in the context of as complete a solution as possible
WHEN:  end of PI
WHO:   by ART product manager and product owners to sponsors, interested stakeholders and customers
SHOWS: Results of combined work between ARTs to influence investment advice in solution

**Cools facts**
- working software is how value and quality is measured

## Relentlessly improve through Inspect and Adapt (I&A)
**Inspect and Adapt (I&A)**
3 parts
* PI system demo
  * (Covered above)
* Quantitative measurement
  * Measure planned vs actual performance of ART
  * Architects accountable for business value scores of enabler features and capabilities
  * (refer lesson 2 about value stream metrics)
* Problem-solving workshop
  * Retrospective to identify problems (seeds problem-solving workshop)
  * Typically, issues are people, process or tech related
  * dedicated structured session that identifies root causes of systemic issues
  * Output: prioritised backlog of improvements that must enter into a PI iteration
  * Process
    1. Retrospective out problems and pick one
    2. apply root cause analysis (5 why's)
    3. identify largest root cause using pareto analysis
    4. restate new problem with biggest root cause score
    5. brainstorm solutions
    6. identify and create backlog improvement items